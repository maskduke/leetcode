/*
Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:

Integers in each row are sorted in ascending from left to right.
Integers in each column are sorted in ascending from top to bottom.
For example,

Consider the following matrix:

[
  [1,   4,  7, 11, 15],
  [2,   5,  8, 12, 19],
  [3,   6,  9, 16, 22],
  [10, 13, 14, 17, 24],
  [18, 21, 23, 26, 30]
]
Given target = 5, return true.

Given target = 20, return false.

Hide Tags Divide and Conquer Binary Search
Hide Similar Problems (M) Search a 2D Matrix

*/

//Codes start from here
public class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        //negative check
        if (matrix == null || matrix.length == 0 || matrix.length == 0) {
            return false;
        }
        return helper(matrix, target, 0, matrix[0].length-1, 0, matrix.length-1);
    }
    
    private boolean helper(int[][] m, int t, int l, int r, int u, int b) {
        //Divide and Conquer
    	if (m[u][l] > t || m[b][r] < t) {
    		return false;
    	}
        //Pick a middle row and do Binary Search
        int row = (b+u)/2;
        int left = l, right = r, middle;
        while (left <= right) {
            middle = (left+right)/2;
            if (m[row][middle] == t) {
                return true;
            }
            if (m[row][middle] > t) {
                right = middle-1;
            }
            else {
                left = middle+1;
            }
        }
        return ((right >= 0 && row < m.length-1)?helper(m, t, l, right, row+1, b):false) || ((left < m[0].length && row > 0)?helper(m, t, left, r, u, row-1):false);
    }
}
