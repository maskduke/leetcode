/*
Given an array nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position.

For example,
Given nums = [1,3,-1,-3,5,3,6,7], and k = 3.

Window position                Max
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7
Therefore, return the max sliding window as [3,3,5,5,6,7].

Note: 
You may assume k is always valid, ie: 1 ≤ k ≤ input array's size for non-empty array.

Follow up:
Could you solve it in linear time?
*/


//codes start from here
/* This is a typical Monotonic Queue example, will use Deque data structure
public class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        if (nums == null || nums.length == 0) {
            return new int[0];
        }
        int[] result = new int[nums.length-k+1];
        Deque<Integer> dq = new ArrayDeque<Integer>();
        int resultIndex = 0;
        for (int i = 0; i < nums.length; ++i) {
            //remove out bounded elements
            if (!dq.isEmpty() && dq.peekFirst() < i-k+1) {
                dq.pollFirst();
            }
            //remove smaller candidates from tail
            while (!dq.isEmpty() && nums[dq.peekLast()] < nums[i]) {
                dq.pollLast();
            }
            dq.offerLast(i);
            if (i >= k-1) {
                result[resultIndex++] = nums[dq.peekFirst()];
            }
        }
        return result;
    }
}
